{"version":3,"file":"projectConfig.test.js","sourceRoot":"","sources":["../../src/e2etest/projectConfig.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n * @format\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport {\n  projectConfigWindows,\n  WindowsProjectConfig,\n} from '../config/projectConfig';\n\nimport {copyAndReplace} from '../generator-common';\nimport {AutolinkWindows} from '../runWindows/utils/autolink';\nimport {\n  ensureWinUI3Project,\n  templateRoot,\n  testProjectGuid,\n  tryMkdir,\n} from './projectConfig.utils';\n\ntype TargetProject = [string, ((folder: string) => Promise<void>)?];\n\nfunction project(\n  name: string,\n  setup?: (folder: string) => Promise<void>,\n): TargetProject {\n  return [name, setup];\n}\n\nconst projects: TargetProject[] = [\n  // Nothing but a react-native.config.js, with nulls\n  project('BlankApp'),\n  // Nothing but a windows folder\n  project('MissingProjectFilesApp', async (folder: string) => {\n    const windowsDir = path.join(folder, 'windows');\n    await tryMkdir(windowsDir);\n  }),\n  // New C++ project based on the template\n  project('SimpleCppApp', async (folder: string) => {\n    const windowsDir = path.join(folder, 'windows');\n    await tryMkdir(windowsDir);\n\n    const replacements = {\n      name: 'SimpleCppApp',\n      namespace: 'SimpleCppApp',\n      useMustache: true,\n      projectGuidUpper: testProjectGuid,\n      projectGuidLower: testProjectGuid.toLowerCase(),\n    };\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cpp-app/proj/MyApp.sln'),\n      path.join(windowsDir, 'SimpleCppApp.sln'),\n      replacements,\n      null,\n    );\n\n    const projDir = path.join(windowsDir, 'SimpleCppApp');\n    await tryMkdir(projDir);\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cpp-app/proj/MyApp.vcxproj'),\n      path.join(projDir, 'SimpleCppApp.vcxproj'),\n      replacements,\n      null,\n    );\n  }),\n  // New C# project based on the template\n  project('SimpleCSharpApp', async (folder: string) => {\n    const windowsDir = path.join(folder, 'windows');\n    await tryMkdir(windowsDir);\n\n    const replacements = {\n      name: 'SimpleCSharpApp',\n      namespace: 'SimpleCSharpApp',\n      useMustache: true,\n      projectGuidUpper: testProjectGuid,\n      projectGuidLower: testProjectGuid.toLowerCase(),\n    };\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cs-app/proj/MyApp.sln'),\n      path.join(windowsDir, 'SimpleCSharpApp.sln'),\n      replacements,\n      null,\n    );\n\n    const projDir = path.join(windowsDir, 'SimpleCSharpApp');\n    await tryMkdir(projDir);\n\n    await copyAndReplace(\n      path.join(templateRoot, 'cs-app/proj/MyApp.csproj'),\n      path.join(projDir, 'SimpleCSharpApp.csproj'),\n      replacements,\n      null,\n    );\n  }),\n  project('WithWinUI3', async (folder: string) => {\n    await ensureWinUI3Project(folder);\n  }),\n  project('WithIndirectDependency'),\n  project('WithExperimentalFeaturesProps'),\n  project('WithUseExperimentalNuget'),\n  project('WithUseExperimentalNugetSetInProject'),\n];\n\n// Tests that given userConfig is null, the result will always be null\ntest.each(projects)(\n  'projectConfig - %s (userConfig is null)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig = null;\n\n    expect(projectConfigWindows(folder, userConfig)).toBeNull();\n  },\n);\n\n// Tests the result given a windows project config in react-native.config.js\ntest.each(projects)(\n  'projectConfig - %s (Use react-native.config.js)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n    const rnc = require(path.join(folder, 'react-native.config.js'));\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig: Partial<WindowsProjectConfig> = rnc.project.windows;\n\n    if (name === 'BlankApp') {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot();\n    } else {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n      });\n    }\n  },\n);\n\n// Tests the result of ignoring the windows project config in react-native.config.js\ntest.each(projects)(\n  'projectConfig - %s (Ignore react-native.config.js)',\n  async (name, setup) => {\n    const folder = path.resolve('src/e2etest/projects/', name);\n\n    if (setup !== undefined) {\n      await setup(folder);\n    }\n\n    const userConfig: Partial<WindowsProjectConfig> = {};\n\n    if (name === 'BlankApp') {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot();\n    } else {\n      expect(projectConfigWindows(folder, userConfig)).toMatchSnapshot({\n        folder: expect.stringContaining(name),\n      });\n    }\n  },\n);\n\ntest('useWinUI3=true in react-native.config.js, useWinUI3=false in ExperimentalFeatures.props', async () => {\n  const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n\n  const rnc = require(path.join(folder, 'react-native.config.js'));\n\n  const config = projectConfigWindows(folder, rnc.project.windows)!;\n\n  const al = new AutolinkWindows(\n    {windows: config},\n    {},\n    {\n      check: false,\n      logging: false,\n    },\n  );\n\n  const exd = await al.ensureXAMLDialect();\n  expect(exd).toBeTruthy();\n\n  const packagesConfig = (\n    await fs.promises.readFile(\n      path.join(folder, 'windows/WithWinUI3/packages.config'),\n    )\n  ).toString();\n\n  const experimentalFeatures = (\n    await fs.promises.readFile(\n      path.join(folder, 'windows/ExperimentalFeatures.props'),\n    )\n  ).toString();\n\n  expect(packagesConfig.replace(/\\r/g, '')).toMatchSnapshot();\n\n  expect(experimentalFeatures.replace(/\\r/g, '')).toMatchSnapshot();\n});\n"]}