{"version":3,"file":"autolink.test.js","sourceRoot":"","sources":["../../src/e2etest/autolink.test.ts"],"names":[],"mappings":";;;;;AAAA,gDAAwB;AACxB,2DAA+D;AAC/D,2DAA6D;AAC7D,2CAAyC;AACzC,+DAA4D;AAE5D,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAC1C,MAAM,CAAC,GAAG,EAAE;QACV,kCAAkC;QAClC,IAAI,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;IACpD,MAAM,CAAC,GAAG,EAAE;QACV,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAE,EAAC,EACb,EAAE,EACF,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAC,CAC9B,CAAC;QACF,QAAQ,CAAC,6BAA6B,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,MAAM,YAAa,SAAQ,0BAAe;IAA1C;;QAIS,mBAAc,GAAG,EAAE,CAAC;QACpB,8BAAyB,GAAG,EAAE,CAAC;IAiB1C,CAAC;IArBU,uBAAuB;QAC5B,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAGS,oBAAoB;QAC1B,OAAO,EAAC,IAAI,EAAC,iBAAiB,EAAE,OAAO,EAAE,IAAI,kBAAS,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,EAAE,iBAAiB,CAAC,EAAC,CAAC;IACtH,CAAC;IACS,+BAA+B;QACrC,OAAO,EAAC,IAAI,EAAE,4BAA4B,EAAE,OAAO,EAAE,IAAI,kBAAS,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,yBAAyB,EAAE,iBAAiB,CAAC,EAAC,CAAC;IAC7I,CAAC;IACS,KAAK,CAAC,UAAU,CAAC,QAAgB,EAAE,OAAe;QACxD,IAAI,QAAQ,KAAK,iBAAiB,EAAE;YAChC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC;SACjC;aAAM,IAAI,QAAQ,KAAK,4BAA4B,EAAE;YAClD,IAAI,CAAC,yBAAyB,GAAG,OAAO,CAAC;SAC5C;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,iBAAiB,QAAQ,EAAE,CAAC,CAAC;SAChD;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AAGC,IAAI,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAC9B,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAC,EAAC,EAC9C,EAAE,EACF,EAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAC,CAC1C,CAAC;IACF,MAAM,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC,YAAY,CAAC,CAAC,aAAa,EAAE,CAAC;IACxE,MAAM,CAAC,GAAG,EAAE;QACV,QAAQ,CAAC,6BAA6B,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IAC7B,MAAM,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACvE,MAAM,CAAC,GAAG,EAAE;QACV,QAAQ,CAAC,6BAA6B,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;AACf,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qBAAqB,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;IACvC,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAC,EAAC,EACvE,EAAE,EACF;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,2DAA2D;KAClE,CACF,CAAC;IACF,MAAM,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC3E,MAAM,CAAC,QAAQ,CAAC,uBAAuB,EAAE,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,CAAC;IAEnE,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,uBAAuB,EAAE,YAAY,CAAC,CAAC;IACnE,MAAM,yCAAmB,CAAC,MAAM,CAAC,CAAC;IAClC,MAAM,CAAC,GAAG,EAAE;QACV,QAAQ,CAAC,iCAAiC,EAAE,CAAC;IAC/C,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACb,QAAQ,CAAC,kBAAkB,EAAE,CAAC;IAE9B,MAAM,aAAa,GAAG,QAAQ,CAAC,uBAAuB,EAAE,CAAC,OAAO,CAAC;IACjE,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC1C,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACxD,QAAQ,CAAC,iCAAiC,EAAE,CAAC;IAC7C,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC3C,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAC,EAAC,EACvE,EAAE,EACF;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,2DAA2D;KAClE,CACF,CAAC;IACF,MAAM,YAAY,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAC;IACnD,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7C,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAC9C,iDAAiD,CAClD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;IAC/C,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAC,EAAC,EACvE;QACE,WAAW,EAAE;YACX,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,SAAS;YACf,SAAS,EAAE;gBACT,OAAO,EAAE,EAAE;aACZ;YACD,MAAM,EAAE,EAAE;YACV,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,EAAE;SACX;KACF,EACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,2DAA2D;KAClE,CACF,CAAC;IACF,MAAM,YAAY,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAC;IACnD,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC7C,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAC9C,iDAAiD,CAClD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,oCAAoC,EAAE,GAAG,EAAE;IAC9C,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAC,EAAC,EACvE;QACE,WAAW,EAAE;YACX,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,SAAS;YACf,SAAS,EAAE;gBACT,OAAO,EAAE,EAAE;aACZ;YACD,MAAM,EAAE,EAAE;YACV,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,EAAE;SACX;KACF,EACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EACF,yEAAyE;KAC5E,CACF,CAAC;IACF,MAAM,YAAY,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IAClD,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACnD,MAAM,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;IAC7C,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAC,EAAC,EACvE;QACE,WAAW,EAAE;YACX,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,SAAS;YACf,SAAS,EAAE;gBACT,OAAO,EAAE;oBACP,SAAS,EAAE,SAAS;oBACpB,QAAQ,EAAE;wBACR;4BACE,gBAAgB,EAAE,IAAI;4BACtB,WAAW,EAAE,qBAAqB;4BAClC,UAAU,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC;4BACtC,mBAAmB,EAAE,CAAC,sBAAsB,CAAC;yBAC9C;qBACF;iBACF;aACF;YACD,MAAM,EAAE,EAAE;YACV,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,EAAE;SACX;KACF,EACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,2DAA2D;KAClE,CACF,CAAC;IACF,MAAM,YAAY,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAC;IACnD,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;IAClE,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAChE,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAChD,wDAAwD,CACzD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,kCAAkC,EAAE,GAAG,EAAE;IAC5C,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAC,EAAC,EACvE;QACE,WAAW,EAAE;YACX,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,SAAS;YACf,SAAS,EAAE;gBACT,OAAO,EAAE;oBACP,SAAS,EAAE,SAAS;oBACpB,QAAQ,EAAE;wBACR;4BACE,gBAAgB,EAAE,IAAI;4BACtB,YAAY,EAAE,CAAC,UAAU,CAAC;4BAC1B,WAAW,EAAE,qBAAqB;4BAClC,UAAU,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC;4BACtC,kBAAkB,EAAE,CAAC,sBAAsB,CAAC;yBAC7C;qBACF;iBACF;aACF;YACD,MAAM,EAAE,EAAE;YACV,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,EAAE;SACX;KACF,EACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EACF,yEAAyE;KAC5E,CACF,CAAC;IACF,MAAM,YAAY,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;IAClD,MAAM,CAAC,YAAY,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACpE,MAAM,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC,SAAS,CACpD,kDAAkD,CACnD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,6GAA6G,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;IAC/H,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;IAC/D,MAAM,GAAG,GAAG,OAAO,CAAC,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAG,oCAAoB,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,CAAE,CAAC;IAElE,MAAM,EAAE,GAAG,IAAI,YAAY,CACzB,EAAC,OAAO,EAAE,MAAM,EAAC,EACjB,EAAE,EACF;QACE,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,KAAK;KACf,CACF,CAAC;IACF,EAAE,CAAC,yBAAyB,GAAG,4IAA4I,CAAC;IAC5K,EAAE,CAAC,cAAc,GAAG,4DAA4D,CAAC;IAEjF,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,iBAAiB,EAAE,CAAC;IACzC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;IAEzB,MAAM,4BAA4B,GAAG,2IAA2I,CAAC;IACjL,MAAM,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAE3E,4BAA4B;IAC5B,aAAa;IACb,0CAA0C;IAC1C,+FAA+F;IAC/F,cAAc;IACd,EAAE;IACF,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACvD,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,uCAAuC,CAAC,CAAC;IAC7E,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAE7D,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,6GAA6G,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;IAC/H,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;IAC/D,MAAM,GAAG,GAAG,OAAO,CAAC,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAG,oCAAoB,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,CAAE,CAAC;IAClE,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,MAAM,EAAE,GAAG,IAAI,YAAY,CACzB,EAAC,OAAO,EAAE,MAAM,EAAC,EACjB,EAAE,EACF;QACE,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,KAAK;KACf,CACF,CAAC;IACF,EAAE,CAAC,yBAAyB,GAAG,2IAA2I,CAAC;IAC3K,EAAE,CAAC,cAAc,GAAG,4DAA4D,CAAC;IAEjF,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,iBAAiB,EAAE,CAAC;IACzC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;IAEzB,MAAM,4BAA4B,GAAG,4IAA4I,CAAC;IAClL,MAAM,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAE3E,4BAA4B;IAC5B,aAAa;IACb,0CAA0C;IAC1C,+FAA+F;IAC/F,cAAc;IACd,EAAE;IACF,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;IAC3D,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,uCAAuC,CAAC,CAAC;IAC7E,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAEzD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,2GAA2G,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;IAC7H,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;IAC/D,MAAM,GAAG,GAAG,OAAO,CAAC,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAG,oCAAoB,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,CAAE,CAAC;IAClE,OAAO,MAAM,CAAC,SAAS,CAAC;IACxB,MAAM,EAAE,GAAG,IAAI,YAAY,CACzB,EAAC,OAAO,EAAE,MAAM,EAAC,EACjB,EAAE,EACF;QACE,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,KAAK;KACf,CACF,CAAC;IACF,EAAE,CAAC,yBAAyB,GAAG,2IAA2I,CAAC;IAC3K,EAAE,CAAC,cAAc,GAAG,4DAA4D,CAAC;IAEjF,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,iBAAiB,EAAE,CAAC;IACzC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;IAEzB,MAAM,4BAA4B,GAAG,2IAA2I,CAAC;IACjL,MAAM,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAE3E,4BAA4B;IAC5B,aAAa;IACb,0CAA0C;IAC1C,+FAA+F;IAC/F,cAAc;IACd,EAAE;IACF,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;IACvD,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,uCAAuC,CAAC,CAAC;IAC7E,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAE7D,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,4GAA4G,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;IAC9H,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;IAC/D,MAAM,GAAG,GAAG,OAAO,CAAC,cAAI,CAAC,IAAI,CAAC,MAAM,EAAE,wBAAwB,CAAC,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAG,oCAAoB,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,CAAE,CAAC;IAClE,OAAO,MAAM,CAAC,SAAS,CAAC;IACxB,MAAM,EAAE,GAAG,IAAI,YAAY,CACzB,EAAC,OAAO,EAAE,MAAM,EAAC,EACjB,EAAE,EACF;QACE,KAAK,EAAE,KAAK;QACZ,OAAO,EAAE,KAAK;KACf,CACF,CAAC;IACF,EAAE,CAAC,yBAAyB,GAAG,4IAA4I,CAAC;IAC5K,EAAE,CAAC,cAAc,GAAG,2FAA2F,CAAC;IAEhH,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,iBAAiB,EAAE,CAAC;IACzC,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;IAEzB,MAAM,4BAA4B,GAAG,4IAA4I,CAAC;IAClL,MAAM,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;IAE3E,4BAA4B;IAC5B,aAAa;IACb,0CAA0C;IAC1C,+FAA+F;IAC/F,cAAc;IACd,EAAE;IACF,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;IAC3D,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,uCAAuC,CAAC,CAAC;IAC7E,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;IAEzD,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,8BAA8B,EAAE,GAAG,EAAE;IACxC,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,EAAC,OAAO,EAAE,EAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,YAAY,EAAE,SAAS,EAAC,EAAC,EACvE;QACE,WAAW,EAAE;YACX,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,SAAS;YACf,SAAS,EAAE;gBACT,OAAO,EAAE;oBACP,SAAS,EAAE,SAAS;oBACpB,QAAQ,EAAE;wBACR;4BACE,gBAAgB,EAAE,IAAI;4BACtB,WAAW,EAAE,qBAAqB;4BAClC,UAAU,EAAE,CAAC,YAAY,EAAE,UAAU,CAAC;4BACtC,mBAAmB,EAAE,CAAC,sBAAsB,CAAC;yBAC9C;wBACD;4BACE,gBAAgB,EAAE,KAAK;4BACvB,WAAW,EAAE,kBAAkB;yBAChC;qBACF;iBACF;aACF;YACD,MAAM,EAAE,EAAE;YACV,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,EAAE;SACX;KACF,EACD;QACE,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,+FAA+F;KACtG,CACF,CAAC;IACF,MAAM,YAAY,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAC;IACnD,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;IAClE,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAChE,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,SAAS,CAChD,wDAAwD,CACzD,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import path from 'path';\nimport { projectConfigWindows } from '../config/projectConfig';\nimport {AutolinkWindows} from '../runWindows/utils/autolink';\nimport {DOMParser} from '@xmldom/xmldom';\nimport { ensureWinUI3Project } from './projectConfig.utils';\n\ntest('autolink with no windows project', () => {\n    expect(() => {\n      // eslint-disable-next-line no-new\n      new AutolinkTest({}, {}, {check: true, logging: false});\n    }).toThrowError();\n  });\n  \n  test('autolink with incomplete windows project', () => {\n    expect(() => {\n      const autolink = new AutolinkTest(\n        {windows: {}},\n        {},\n        {check: true, logging: false},\n      );\n      autolink.validateRequiredAppProperties();\n    }).toThrowError();\n  });\n  \n  class AutolinkTest extends AutolinkWindows {\n    public getWindowsProjectConfig() {\n      return this.windowsAppConfig;\n    }\n    public packagesConfig = '';\n    public experimentalFeaturesProps = '';\n    protected getPackagesConfigXml(){\n        return {path:'packages.config', content: new DOMParser().parseFromString(this.packagesConfig, 'application/xml')};\n    }\n    protected getExperimentalFeaturesPropsXml(){\n        return {path: 'ExperimentalFeatures.props', content: new DOMParser().parseFromString(this.experimentalFeaturesProps, 'application/xml')};\n    }\n    protected async updateFile(filepath: string, content: string) {\n        if (filepath === 'packages.config') {\n            this.packagesConfig = content;\n        } else if (filepath === 'ExperimentalFeatures.props') {\n            this.experimentalFeaturesProps = content;\n        } else {\n            throw new Error(`Unknown path: ${filepath}`);\n        }\n        return true;\n    }\n}\n\n  \n  test('autolink fixup sln', () => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.'}},\n      {},\n      {check: true, logging: false, sln: 'foo'},\n    );\n    expect(autolink.getWindowsProjectConfig().solutionFile).toBeUndefined();\n    expect(() => {\n      autolink.validateRequiredAppProperties();\n    }).toThrow();\n    autolink.fixUpForSlnOption();\n    expect(autolink.getWindowsProjectConfig().solutionFile).toEqual('foo');\n    expect(() => {\n      autolink.validateRequiredAppProperties();\n    }).toThrow();\n  });\n  \n  test('autolink fixup proj', async done => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n      {},\n      {\n        check: true,\n        logging: false,\n        proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n      },\n    );\n    expect(autolink.getWindowsProjectConfig().solutionFile).toEqual('foo.sln');\n    expect(autolink.getWindowsProjectConfig().project).toBeUndefined();\n  \n    const folder = path.resolve('src/e2etest/projects/', 'WithWinUI3');\n    await ensureWinUI3Project(folder);\n    expect(() => {\n      autolink.validateRequiredProjectProperties();\n    }).toThrow();\n    autolink.fixUpForProjOption();\n  \n    const projectConfig = autolink.getWindowsProjectConfig().project;\n    expect(projectConfig).not.toBeUndefined();\n    expect(projectConfig.projectName).toEqual('WithWinUI3');\n    autolink.validateRequiredProjectProperties();\n    done();\n  });\n  \n  test('empty cpp autolink dependencies', () => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n      {},\n      {\n        check: true,\n        logging: false,\n        proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n      },\n    );\n    const replacements = autolink.getCppReplacements();\n    expect(replacements.cppIncludes).toEqual('');\n    expect(replacements.cppPackageProviders).toEqual(\n      '\\n    UNREFERENCED_PARAMETER(packageProviders);',\n    );\n  });\n  \n  test('one invalid cpp autolink dependency', () => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n      {\n        superModule: {\n          name: 'superModule',\n          root: 'theRoot',\n          platforms: {\n            windows: {},\n          },\n          assets: [],\n          hooks: {},\n          params: [],\n        },\n      },\n      {\n        check: true,\n        logging: false,\n        proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n      },\n    );\n    const replacements = autolink.getCppReplacements();\n    expect(replacements.cppIncludes).toEqual('');\n    expect(replacements.cppPackageProviders).toEqual(\n      '\\n    UNREFERENCED_PARAMETER(packageProviders);',\n    );\n  });\n  \n  test('one invalid cs autolink dependency', () => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n      {\n        superModule: {\n          name: 'superModule',\n          root: 'theRoot',\n          platforms: {\n            windows: {},\n          },\n          assets: [],\n          hooks: {},\n          params: [],\n        },\n      },\n      {\n        check: true,\n        logging: false,\n        proj:\n          'projects/SimpleCSharpApp/windows/SimpleCSharpApp/SimpleCSharpApp.csproj',\n      },\n    );\n    const replacements = autolink.getCsReplacements();\n    expect(replacements.csUsingNamespaces).toEqual('');\n    expect(replacements.csReactPackageProviders).toEqual('');\n  });\n  \n  test('one valid cpp autolink dependency', () => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n      {\n        superModule: {\n          name: 'superModule',\n          root: 'theRoot',\n          platforms: {\n            windows: {\n              sourceDir: __dirname,\n              projects: [\n                {\n                  directDependency: true,\n                  projectFile: 'superModule.vcxproj',\n                  cppHeaders: ['Garfield.h', 'Snoopy.h'],\n                  cppPackageProviders: ['FamousAnimalCartoons'],\n                },\n              ],\n            },\n          },\n          assets: [],\n          hooks: {},\n          params: [],\n        },\n      },\n      {\n        check: true,\n        logging: false,\n        proj: 'projects/WithWinUI3/windows/WithWinUI3/WithWinUI3.vcxproj',\n      },\n    );\n    const replacements = autolink.getCppReplacements();\n    expect(replacements.cppIncludes).toMatch(/#include <Garfield.h>/);\n    expect(replacements.cppIncludes).toMatch(/#include <Snoopy.h>/);\n    expect(replacements.cppPackageProviders).toContain(\n      'packageProviders.Append(winrt::FamousAnimalCartoons())',\n    );\n  });\n  \n  test('one valid cs autolink dependency', () => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n      {\n        superModule: {\n          name: 'superModule',\n          root: 'theRoot',\n          platforms: {\n            windows: {\n              sourceDir: __dirname,\n              projects: [\n                {\n                  directDependency: true,\n                  csNamespaces: ['Garfield'],\n                  projectFile: 'superModule.vcxproj',\n                  cppHeaders: ['Garfield.h', 'Snoopy.h'],\n                  csPackageProviders: ['FamousAnimalCartoons'],\n                },\n              ],\n            },\n          },\n          assets: [],\n          hooks: {},\n          params: [],\n        },\n      },\n      {\n        check: true,\n        logging: false,\n        proj:\n          'projects/SimpleCSharpApp/windows/SimpleCSharpApp/SimpleCSharpApp.csproj',\n      },\n    );\n    const replacements = autolink.getCsReplacements();\n    expect(replacements.csUsingNamespaces).toContain('using Garfield;');\n    expect(replacements.csReactPackageProviders).toContain(\n      'packageProviders.Add(new FamousAnimalCartoons())',\n    );\n  });\n  \n  test('ensureXAMLDialect - useWinUI3=true in react-native.config.js, useWinUI3=false in ExperimentalFeatures.props', async done => {\n    const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n    const rnc = require(path.join(folder, 'react-native.config.js'));\n  \n    const config = projectConfigWindows(folder, rnc.project.windows)!;\n  \n    const al = new AutolinkTest(\n      {windows: config},\n      {},\n      {\n        check: false,\n        logging: false,\n      },\n    );\n    al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>`;\n    al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/></packages>`;\n  \n    const exd = await al.ensureXAMLDialect();\n    expect(exd).toBeTruthy();\n  \n    const expectedExperimentalFeatures = '<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>';\n    expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n    // example packages.config: \n    // <packages>\n    //   <package id=\"SuperPkg\" version=\"42\"/>\n    //   <package id=\"Microsoft.WinUI\" version=\"3.0.0-preview3.201113.0\" targetFramework=\"native\"/>\n    // </packages>\n    //\n    expect(al.packagesConfig).toContain('Microsoft.WinUI');\n    expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n    expect(al.packagesConfig).not.toContain('Microsoft.UI.Xaml');\n  \n    done();\n  });\n\n  test('ensureXAMLDialect - useWinUI3=false in react-native.config.js, useWinUI3=true in ExperimentalFeatures.props', async done => {\n    const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n    const rnc = require(path.join(folder, 'react-native.config.js'));\n  \n    const config = projectConfigWindows(folder, rnc.project.windows)!;\n    config.useWinUI3 = false;\n    const al = new AutolinkTest(\n      {windows: config},\n      {},\n      {\n        check: false,\n        logging: false,\n      },\n    );\n    al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>`;\n    al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/></packages>`;\n  \n    const exd = await al.ensureXAMLDialect();\n    expect(exd).toBeTruthy();\n  \n    const expectedExperimentalFeatures = '<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>';\n    expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n    // example packages.config: \n    // <packages>\n    //   <package id=\"SuperPkg\" version=\"42\"/>\n    //   <package id=\"Microsoft.WinUI\" version=\"3.0.0-preview3.201113.0\" targetFramework=\"native\"/>\n    // </packages>\n    //\n    expect(al.packagesConfig).not.toContain('Microsoft.WinUI');\n    expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n    expect(al.packagesConfig).toContain('Microsoft.UI.Xaml');\n  \n    done();\n  });\n\n  test('ensureXAMLDialect - useWinUI3 not in react-native.config.js, useWinUI3=true in ExperimentalFeatures.props', async done => {\n    const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n    const rnc = require(path.join(folder, 'react-native.config.js'));\n  \n    const config = projectConfigWindows(folder, rnc.project.windows)!;\n    delete config.useWinUI3;\n    const al = new AutolinkTest(\n      {windows: config},\n      {},\n      {\n        check: false,\n        logging: false,\n      },\n    );\n    al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>`;\n    al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/></packages>`;\n  \n    const exd = await al.ensureXAMLDialect();\n    expect(exd).toBeTruthy();\n  \n    const expectedExperimentalFeatures = '<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>true</UseWinUI3></PropertyGroup></Project>';\n    expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n    // example packages.config: \n    // <packages>\n    //   <package id=\"SuperPkg\" version=\"42\"/>\n    //   <package id=\"Microsoft.WinUI\" version=\"3.0.0-preview3.201113.0\" targetFramework=\"native\"/>\n    // </packages>\n    //\n    expect(al.packagesConfig).toContain('Microsoft.WinUI');\n    expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n    expect(al.packagesConfig).not.toContain('Microsoft.UI.Xaml');\n  \n    done();\n  });\n  \n  test('ensureXAMLDialect - useWinUI3 not in react-native.config.js, useWinUI3=false in ExperimentalFeatures.props', async done => {\n    const folder = path.resolve('src/e2etest/projects/WithWinUI3');\n    const rnc = require(path.join(folder, 'react-native.config.js'));\n  \n    const config = projectConfigWindows(folder, rnc.project.windows)!;\n    delete config.useWinUI3;\n    const al = new AutolinkTest(\n      {windows: config},\n      {},\n      {\n        check: false,\n        logging: false,\n      },\n    );\n    al.experimentalFeaturesProps = `<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>`;\n    al.packagesConfig = `<packages><package id=\"SuperPkg\" version=\"42\"/><package id=\"Microsoft.WinUI\"/></packages>`;\n  \n    const exd = await al.ensureXAMLDialect();\n    expect(exd).toBeTruthy();\n  \n    const expectedExperimentalFeatures = '<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"><PropertyGroup><UseWinUI3>false</UseWinUI3></PropertyGroup></Project>';\n    expect(al.experimentalFeaturesProps).toEqual(expectedExperimentalFeatures);\n\n    // example packages.config: \n    // <packages>\n    //   <package id=\"SuperPkg\" version=\"42\"/>\n    //   <package id=\"Microsoft.WinUI\" version=\"3.0.0-preview4.210210.4\" targetFramework=\"native\"/>\n    // </packages>\n    //\n    expect(al.packagesConfig).not.toContain('Microsoft.WinUI');\n    expect(al.packagesConfig).toContain('<package id=\"SuperPkg\" version=\"42\"/>');\n    expect(al.packagesConfig).toContain('Microsoft.UI.Xaml');\n  \n    done();\n  });\n  \n  test('Indirect autolink dependency', () => {\n    const autolink = new AutolinkTest(\n      {windows: {folder: __dirname, sourceDir: '.', solutionFile: 'foo.sln'}},\n      {\n        superModule: {\n          name: 'superModule',\n          root: 'theRoot',\n          platforms: {\n            windows: {\n              sourceDir: __dirname,\n              projects: [\n                {\n                  directDependency: true,\n                  projectFile: 'superModule.vcxproj',\n                  cppHeaders: ['Garfield.h', 'Snoopy.h'],\n                  cppPackageProviders: ['FamousAnimalCartoons'],\n                },\n                {\n                  directDependency: false,\n                  projectFile: 'indirect.vcxproj',\n                }\n              ],\n            },\n          },\n          assets: [],\n          hooks: {},\n          params: [],\n        },\n      },\n      {\n        check: true,\n        logging: false,\n        proj: 'projects/WithIndirectDependency/windows/WithIndirectDependency/WithIndirectDependency.vcxproj',\n      },\n    );\n    const replacements = autolink.getCppReplacements();\n    expect(replacements.cppIncludes).toMatch(/#include <Garfield.h>/);\n    expect(replacements.cppIncludes).toMatch(/#include <Snoopy.h>/);\n    expect(replacements.cppPackageProviders).toContain(\n      'packageProviders.Append(winrt::FamousAnimalCartoons())',\n    );\n  });\n"]}