"use strict";
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 * @format
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const projectConfig_1 = require("../config/projectConfig");
const generator_common_1 = require("../generator-common");
const autolink_1 = require("../runWindows/utils/autolink");
const projectConfig_utils_1 = require("./projectConfig.utils");
function project(name, setup) {
    return [name, setup];
}
const projects = [
    // Nothing but a react-native.config.js, with nulls
    project('BlankApp'),
    // Nothing but a windows folder
    project('MissingProjectFilesApp', async (folder) => {
        const windowsDir = path_1.default.join(folder, 'windows');
        await projectConfig_utils_1.tryMkdir(windowsDir);
    }),
    // New C++ project based on the template
    project('SimpleCppApp', async (folder) => {
        const windowsDir = path_1.default.join(folder, 'windows');
        await projectConfig_utils_1.tryMkdir(windowsDir);
        const replacements = {
            name: 'SimpleCppApp',
            namespace: 'SimpleCppApp',
            useMustache: true,
            projectGuidUpper: projectConfig_utils_1.testProjectGuid,
            projectGuidLower: projectConfig_utils_1.testProjectGuid.toLowerCase(),
        };
        await generator_common_1.copyAndReplace(path_1.default.join(projectConfig_utils_1.templateRoot, 'cpp-app/proj/MyApp.sln'), path_1.default.join(windowsDir, 'SimpleCppApp.sln'), replacements, null);
        const projDir = path_1.default.join(windowsDir, 'SimpleCppApp');
        await projectConfig_utils_1.tryMkdir(projDir);
        await generator_common_1.copyAndReplace(path_1.default.join(projectConfig_utils_1.templateRoot, 'cpp-app/proj/MyApp.vcxproj'), path_1.default.join(projDir, 'SimpleCppApp.vcxproj'), replacements, null);
    }),
    // New C# project based on the template
    project('SimpleCSharpApp', async (folder) => {
        const windowsDir = path_1.default.join(folder, 'windows');
        await projectConfig_utils_1.tryMkdir(windowsDir);
        const replacements = {
            name: 'SimpleCSharpApp',
            namespace: 'SimpleCSharpApp',
            useMustache: true,
            projectGuidUpper: projectConfig_utils_1.testProjectGuid,
            projectGuidLower: projectConfig_utils_1.testProjectGuid.toLowerCase(),
        };
        await generator_common_1.copyAndReplace(path_1.default.join(projectConfig_utils_1.templateRoot, 'cs-app/proj/MyApp.sln'), path_1.default.join(windowsDir, 'SimpleCSharpApp.sln'), replacements, null);
        const projDir = path_1.default.join(windowsDir, 'SimpleCSharpApp');
        await projectConfig_utils_1.tryMkdir(projDir);
        await generator_common_1.copyAndReplace(path_1.default.join(projectConfig_utils_1.templateRoot, 'cs-app/proj/MyApp.csproj'), path_1.default.join(projDir, 'SimpleCSharpApp.csproj'), replacements, null);
    }),
    project('WithWinUI3', async (folder) => {
        await projectConfig_utils_1.ensureWinUI3Project(folder);
    }),
    project('WithIndirectDependency'),
    project('WithExperimentalFeaturesProps'),
    project('WithUseExperimentalNuget'),
    project('WithUseExperimentalNugetSetInProject'),
];
// Tests that given userConfig is null, the result will always be null
test.each(projects)('projectConfig - %s (userConfig is null)', async (name, setup) => {
    const folder = path_1.default.resolve('src/e2etest/projects/', name);
    if (setup !== undefined) {
        await setup(folder);
    }
    const userConfig = null;
    expect(projectConfig_1.projectConfigWindows(folder, userConfig)).toBeNull();
});
// Tests the result given a windows project config in react-native.config.js
test.each(projects)('projectConfig - %s (Use react-native.config.js)', async (name, setup) => {
    const folder = path_1.default.resolve('src/e2etest/projects/', name);
    const rnc = require(path_1.default.join(folder, 'react-native.config.js'));
    if (setup !== undefined) {
        await setup(folder);
    }
    const userConfig = rnc.project.windows;
    if (name === 'BlankApp') {
        expect(projectConfig_1.projectConfigWindows(folder, userConfig)).toMatchSnapshot();
    }
    else {
        expect(projectConfig_1.projectConfigWindows(folder, userConfig)).toMatchSnapshot({
            folder: expect.stringContaining(name),
        });
    }
});
// Tests the result of ignoring the windows project config in react-native.config.js
test.each(projects)('projectConfig - %s (Ignore react-native.config.js)', async (name, setup) => {
    const folder = path_1.default.resolve('src/e2etest/projects/', name);
    if (setup !== undefined) {
        await setup(folder);
    }
    const userConfig = {};
    if (name === 'BlankApp') {
        expect(projectConfig_1.projectConfigWindows(folder, userConfig)).toMatchSnapshot();
    }
    else {
        expect(projectConfig_1.projectConfigWindows(folder, userConfig)).toMatchSnapshot({
            folder: expect.stringContaining(name),
        });
    }
});
test('useWinUI3=true in react-native.config.js, useWinUI3=false in ExperimentalFeatures.props', async () => {
    const folder = path_1.default.resolve('src/e2etest/projects/WithWinUI3');
    const rnc = require(path_1.default.join(folder, 'react-native.config.js'));
    const config = projectConfig_1.projectConfigWindows(folder, rnc.project.windows);
    const al = new autolink_1.AutolinkWindows({ windows: config }, {}, {
        check: false,
        logging: false,
    });
    const exd = await al.ensureXAMLDialect();
    expect(exd).toBeTruthy();
    const packagesConfig = (await fs_1.default.promises.readFile(path_1.default.join(folder, 'windows/WithWinUI3/packages.config'))).toString();
    const experimentalFeatures = (await fs_1.default.promises.readFile(path_1.default.join(folder, 'windows/ExperimentalFeatures.props'))).toString();
    expect(packagesConfig.replace(/\r/g, '')).toMatchSnapshot();
    expect(experimentalFeatures.replace(/\r/g, '')).toMatchSnapshot();
});
//# sourceMappingURL=projectConfig.test.js.map