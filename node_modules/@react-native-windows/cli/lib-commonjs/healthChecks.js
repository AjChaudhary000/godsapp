"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHealthChecks = void 0;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
const rnDir = path_1.default.dirname(require.resolve('react-native/package.json', { paths: [process.cwd()] }));
const cliDir = path_1.default.dirname(require.resolve('@react-native-community/cli/package.json', { paths: [rnDir] }));
const execaPath = require.resolve('execa', { paths: [cliDir] });
const execa = require(execaPath);
function getHealthChecks() {
    // All our health checks are windows only...
    if (process.platform !== 'win32') {
        return undefined;
    }
    const rnwDepScriptPath = path_1.default.join(path_1.default.dirname(require.resolve('react-native-windows/package.json', { paths: [process.cwd()] })), 'Scripts/rnw-dependencies.ps1');
    const rnwDeps = child_process_1.execSync(`powershell -ExecutionPolicy Unrestricted -NoProfile ${rnwDepScriptPath} -NoPrompt -ListChecks`);
    const deps = rnwDeps.toString().trim().split('\n');
    return [
        {
            label: 'Windows',
            healthchecks: deps.map(dep => {
                const match = /([^:]+): ([^:]+): (.*)/.exec(dep);
                if (!match) {
                    throw new Error(`Unexpected output from ${rnwDepScriptPath}`);
                }
                const [, /*optional*/ , id, name] = match;
                return {
                    label: name,
                    // The schema check of react-native doctor requires this to be a string, although it should be a boolean
                    // Enable this once we pick up a new version of the CLI that includes https://github.com/react-native-community/cli/pull/1367
                    // isRequired: (optional.trim() === 'Required') ? true : false, 
                    getDiagnostics: async () => {
                        let needsToBeFixed = true;
                        try {
                            await execa(`powershell -ExecutionPolicy Unrestricted -NoProfile ${rnwDepScriptPath} -NoPrompt -Check ${id}`);
                            needsToBeFixed = false;
                        }
                        catch (_a) {
                        }
                        return {
                            needsToBeFixed,
                        };
                    },
                    runAutomaticFix: async ({ loader, logManualInstallation }) => {
                        const command = `powershell -ExecutionPolicy Unrestricted -NoProfile ${rnwDepScriptPath} -Check ${id}`;
                        try {
                            const { exitCode } = await execa(command, { stdio: 'inherit' });
                            if (exitCode) {
                                logManualInstallation({ command, healthcheck: `react-native-windows dependency "${id}"` });
                                loader.fail();
                            }
                            else {
                                loader.succeed();
                            }
                        }
                        catch (_a) {
                            logManualInstallation({ command, healthcheck: `react-native-windows dependency "${id}"` });
                            loader.fail();
                        }
                    }
                };
            })
        }
    ];
}
exports.getHealthChecks = getHealthChecks;
//# sourceMappingURL=healthChecks.js.map