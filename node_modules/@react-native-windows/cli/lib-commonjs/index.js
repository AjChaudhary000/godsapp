"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 * @format
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.projectConfig = exports.dependencyConfig = exports.commands = exports.generateWindows = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const telemetry_1 = require("@react-native-windows/telemetry");
const generator_windows_1 = require("./generator-windows");
const autolink_1 = require("./runWindows/utils/autolink");
const runWindows_1 = require("./runWindows/runWindows");
const dependencyConfig_1 = require("./config/dependencyConfig");
const projectConfig_1 = require("./config/projectConfig");
function scrubOptions(opt) {
    return {
        overwrite: opt.overwrite,
        language: opt.language,
        projectType: opt.projectType,
        experimentalNuGetDependency: opt.experimentalNuGetDependency,
        nuGetTestFeed: opt.nuGetTestFeed !== undefined ? true : false,
        nuGetTestVersion: opt.nuGetTestVersion !== undefined ? true : false,
        useWinUI3: opt.useWinUI3,
        useHermes: opt.useHermes,
        verbose: opt.verbose,
    };
}
/**
 * Simple utility for running the Windows generator.
 *
 * @param  projectDir root project directory (i.e. contains index.js)
 * @param  name       name of the root JS module for this app
 * @param  ns         namespace for the project
 * @param  options    command line options container
 */
async function generateWindows(projectDir, name, ns, options) {
    let error;
    try {
        if (!fs_1.default.existsSync(projectDir)) {
            fs_1.default.mkdirSync(projectDir);
        }
        await generator_windows_1.installScriptsAndDependencies(options);
        const rnwPackage = path_1.default.dirname(require.resolve('react-native-windows/package.json', {
            paths: [projectDir],
        }));
        const templateRoot = path_1.default.join(rnwPackage, 'template');
        await generator_windows_1.copyProjectTemplateAndReplace(templateRoot, projectDir, name, ns, options);
    }
    catch (e) {
        error = e;
        telemetry_1.Telemetry.trackException(error);
        throw e;
    }
    finally {
        if (telemetry_1.Telemetry.client) {
            let rnVersion = '';
            let cliVersion = '';
            try {
                const cwd = process.cwd();
                const rnwPkg = JSON.parse(fs_1.default
                    .readFileSync(require.resolve('react-native-windows/package.json', {
                    paths: [cwd],
                }))
                    .toString());
                rnVersion = rnwPkg.peerDependencies['react-native'] || '';
                const rnwCliPkgJson = require('../package.json');
                cliVersion = rnwCliPkgJson.version;
            }
            catch (_a) { }
            const optScrubbed = scrubOptions(options);
            telemetry_1.Telemetry.client.trackEvent({
                name: 'generate-windows',
                properties: {
                    error: error,
                    ...optScrubbed,
                    'react-native': rnVersion,
                    'cli-version': cliVersion,
                },
            });
            telemetry_1.Telemetry.client.flush();
        }
    }
}
exports.generateWindows = generateWindows;
// Assert the interface here doesn't change for the reasons above
const assertStableInterface = true;
assertStableInterface;
exports.commands = [autolink_1.autoLinkCommand, runWindows_1.runWindowsCommand];
exports.dependencyConfig = dependencyConfig_1.dependencyConfigWindows;
exports.projectConfig = projectConfig_1.projectConfigWindows;
__exportStar(require("./healthChecks"), exports);
//# sourceMappingURL=index.js.map