"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 * @format
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runWindowsCommand = exports.getAnonymizedProjectName = void 0;
const crypto_1 = __importDefault(require("crypto"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const telemetry_1 = require("@react-native-windows/telemetry");
const build = __importStar(require("./utils/build"));
const chalk_1 = __importDefault(require("chalk"));
const deploy = __importStar(require("./utils/deploy"));
const commandWithProgress_1 = require("./utils/commandWithProgress");
const info = __importStar(require("./utils/info"));
const msbuildtools_1 = __importDefault(require("./utils/msbuildtools"));
const runWindowsOptions_1 = require("./runWindowsOptions");
const autolink_1 = require("./utils/autolink");
const os_1 = require("os");
function setExitProcessWithError(error, loggingWasEnabled) {
    if (!loggingWasEnabled) {
        console.log(`Re-run the command with ${chalk_1.default.bold('--logging')} for more information`);
        if (telemetry_1.Telemetry.client) {
            console.log(`Your session id was ${telemetry_1.Telemetry.client.commonProperties.sessionId}`);
        }
    }
    if (error instanceof telemetry_1.CodedError) {
        process.exitCode = telemetry_1.CodedErrors[error.name];
    }
    else {
        process.exitCode = 1;
    }
}
function getPkgVersion(pkgName) {
    try {
        const pkgJsonPath = require.resolve(`${pkgName}/package.json`, {
            paths: [process.cwd(), __dirname],
        });
        const pkgJson = JSON.parse(fs_1.default.readFileSync(pkgJsonPath).toString());
        if (pkgJson.name === pkgName && pkgJson.version !== undefined) {
            return pkgJson.version;
        }
    }
    catch (_a) { }
    commandWithProgress_1.newWarn(`Could not determine ${pkgName} version`);
    return '';
}
let runWindowsPhase = 'None';
/**
 * Performs build deploy and launch of RNW apps.
 * @param args Unprocessed args passed from react-native CLI.
 * @param config Config passed from react-native CLI.
 * @param options Options passed from react-native CLI.
 */
async function runWindows(args, config, options) {
    var _a, _b;
    if (!options.telemetry) {
        if (options.logging) {
            console.log('Disabling telemetry');
        }
        telemetry_1.Telemetry.disable();
    }
    else {
        telemetry_1.Telemetry.setup();
    }
    // https://github.com/yarnpkg/yarn/issues/8334 - Yarn on Windows breaks apps that read from the environment variables
    // Yarn will run node via CreateProcess and pass npm_config_* variables in lowercase without unifying their value
    // with their possibly existing uppercase counterparts. This breaks programs that read from the environment block
    // and write to a case-insensitive dictionary since they expect to encounter each variable only once.
    // The values of the lowercase variables are the one npm actually wants to use, plus they are seeded from the
    // uppercase variable values one if there are no overrides.
    delete process.env.NPM_CONFIG_CACHE;
    delete process.env.NPM_CONFIG_PREFIX;
    const hasRunRnwDependencies = process.env.LocalAppData &&
        fs_1.default.existsSync(path_1.default.join(process.env.LocalAppData, 'rnw-dependencies.txt')); // CODESYNC \vnext\scripts\rnw-dependencies.ps1
    if (options.info) {
        try {
            const output = await info.getEnvironmentInfo();
            console.log(output.trimEnd());
            console.log('  Installed UWP SDKs:');
            const sdks = msbuildtools_1.default.getAllAvailableUAPVersions();
            sdks.forEach(version => console.log('    ' + version));
            return;
        }
        catch (e) {
            telemetry_1.Telemetry.trackException(e);
            commandWithProgress_1.newError('Unable to print environment info.\n' + e.toString());
            return setExitProcessWithError(e, options.logging);
        }
    }
    let runWindowsError;
    try {
        await runWindowsInternal(args, config, options);
    }
    catch (e) {
        telemetry_1.Telemetry.trackException(e);
        runWindowsError = e;
        if (!hasRunRnwDependencies) {
            const rnwPkgJsonPath = require.resolve('react-native-windows/package.json', {
                paths: [process.cwd(), __dirname],
            });
            const rnwDependenciesPath = path_1.default.join(path_1.default.dirname(rnwPkgJsonPath), 'scripts/rnw-dependencies.ps1');
            commandWithProgress_1.newError(`It is possible your installation is missing required software dependencies. Dependencies can be automatically installed by running ${rnwDependenciesPath} from an elevated PowerShell prompt.\nFor more information, go to http://aka.ms/rnw-deps`);
        }
        return setExitProcessWithError(e, options.logging);
    }
    finally {
        (_a = telemetry_1.Telemetry.client) === null || _a === void 0 ? void 0 : _a.trackEvent({
            name: 'run-windows',
            properties: {
                release: options.release,
                arch: options.arch,
                singleproc: options.singleproc,
                emulator: options.emulator,
                device: options.device,
                target: options.target,
                remoteDebugging: options.remoteDebugging,
                logging: options.logging,
                packager: options.packager,
                bundle: options.bundle,
                launch: options.launch,
                autolink: options.autolink,
                build: options.bundle,
                deploy: options.deploy,
                sln: options.sln !== undefined,
                proj: options.proj !== undefined,
                msBuildProps: options.msbuildprops !== undefined
                    ? options.msbuildprops.split(',').length
                    : 0,
                info: options.info,
                directDebugging: options.directDebugging,
                'react-native-windows': getPkgVersion('react-native-windows'),
                'react-native': getPkgVersion('react-native'),
                'cli-version': getPkgVersion('@react-native-windows/cli'),
                msftInternal: telemetry_1.isMSFTInternal(),
                durationInSecs: process.uptime(),
                success: runWindowsError === undefined,
                phase: runWindowsPhase,
                totalMem: os_1.totalmem(),
                diskFree: telemetry_1.getDiskFreeSpace(__dirname),
                cpus: os_1.cpus().length,
                project: await getAnonymizedProjectName(config.root),
                hasRunRnwDependencies: hasRunRnwDependencies,
            },
        });
        (_b = telemetry_1.Telemetry.client) === null || _b === void 0 ? void 0 : _b.flush();
    }
}
async function getAnonymizedProjectName(projectRoot) {
    const projectJsonPath = path_1.default.join(projectRoot, 'package.json');
    if (!fs_1.default.existsSync(projectJsonPath)) {
        return null;
    }
    const projectJson = JSON.parse((await fs_1.default.promises.readFile(projectJsonPath)).toString());
    const projectName = projectJson.name;
    if (typeof projectName !== 'string') {
        return null;
    }
    // Ensure the project name cannot be reverse engineered to avoid leaking PII
    return crypto_1.default
        .createHash('sha256')
        .update(projectName)
        .digest('hex')
        .toString();
}
exports.getAnonymizedProjectName = getAnonymizedProjectName;
async function runWindowsInternal(args, config, options) {
    const verbose = options.logging;
    if (verbose) {
        commandWithProgress_1.newInfo('Verbose: ON');
    }
    // Get the solution file
    let slnFile;
    try {
        slnFile = build.getAppSolutionFile(options, config);
    }
    catch (e) {
        commandWithProgress_1.newError(`Couldn't get app solution information. ${e.message}`);
        throw e;
    }
    try {
        if (options.autolink) {
            const autolinkArgs = [];
            const autolinkConfig = config;
            const autoLinkOptions = {
                logging: options.logging,
                proj: options.proj,
                sln: options.sln,
            };
            runWindowsPhase = 'AutoLink';
            await autolink_1.autoLinkCommand.func(autolinkArgs, autolinkConfig, autoLinkOptions);
        }
        else {
            commandWithProgress_1.newInfo('Autolink step is skipped');
        }
    }
    catch (e) {
        commandWithProgress_1.newError(`Autolinking failed. ${e.message}`);
        throw e;
    }
    let buildTools;
    runWindowsPhase = 'FindBuildTools';
    try {
        buildTools = msbuildtools_1.default.findAvailableVersion(options.arch, verbose);
    }
    catch (error) {
        commandWithProgress_1.newWarn('No public VS release found');
        // Try prerelease
        try {
            commandWithProgress_1.newInfo('Trying pre-release VS');
            buildTools = msbuildtools_1.default.findAvailableVersion(options.arch, verbose, true);
        }
        catch (e) {
            commandWithProgress_1.newError(e.message);
            throw error;
        }
    }
    if (options.build) {
        runWindowsPhase = 'FindSolution';
        if (!slnFile) {
            commandWithProgress_1.newError('Visual Studio Solution file not found. Maybe run "npx react-native-windows-init" first?');
            throw new telemetry_1.CodedError('NoSolution', 'Cannot find solution file');
        }
        // Get build/deploy options
        const buildType = deploy.getBuildConfiguration(options);
        const msBuildProps = build.parseMsBuildProps(options);
        // Disable the autolink check since we just ran it
        msBuildProps.RunAutolinkCheck = 'false';
        try {
            runWindowsPhase = 'FindSolution';
            await build.buildSolution(buildTools, slnFile, buildType, options.arch, msBuildProps, verbose, 'build', options.buildLogDirectory, options.singleproc);
        }
        catch (e) {
            commandWithProgress_1.newError(`Build failed with message ${e.message}. Check your build configuration.`);
            if (e.logfile) {
                console.log('See', chalk_1.default.bold(e.logfile));
            }
            throw e;
        }
    }
    else {
        commandWithProgress_1.newInfo('Build step is skipped');
    }
    if (shouldLaunchPackager(options)) {
        await deploy.startServerInNewWindow(options, verbose);
    }
    if (options.deploy) {
        runWindowsPhase = 'FindSolution';
        if (!slnFile) {
            commandWithProgress_1.newError('Visual Studio Solution file not found. Maybe run "npx react-native-windows-init" first?');
            throw new telemetry_1.CodedError('NoSolution', 'Cannot find solution file');
        }
        try {
            runWindowsPhase = 'Deploy';
            if (options.device || options.emulator || options.target) {
                await deploy.deployToDevice(options, verbose);
            }
            else {
                await deploy.deployToDesktop(options, verbose, config, buildTools);
            }
        }
        catch (e) {
            commandWithProgress_1.newError(`Failed to deploy${e ? `: ${e.message}` : ''}`);
            throw e;
        }
    }
    else {
        commandWithProgress_1.newInfo('Deploy step is skipped');
    }
}
function shouldLaunchPackager(options) {
    return options.packager && options.launch && options.release !== true;
}
/*
// Example of running the Windows Command
runWindows({
  root: 'C:\\github\\hack\\myapp',
  debug: true,
  arch: 'x86',
  nugetPath: 'C:\\github\\react\\react-native-windows\\local-cli\\runWindows\\.nuget\\nuget.exe'
});
*/
/**
 * Starts the app on a connected Windows emulator or mobile device.
 */
exports.runWindowsCommand = {
    name: 'run-windows',
    description: 'builds your app and starts it on a connected Windows desktop, emulator or device',
    func: runWindows,
    options: runWindowsOptions_1.runWindowsOptions,
};
//# sourceMappingURL=runWindows.js.map