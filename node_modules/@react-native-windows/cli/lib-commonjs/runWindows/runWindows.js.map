{"version":3,"file":"runWindows.js","sourceRoot":"","sources":["../../src/runWindows/runWindows.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport crypto from 'crypto';\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  Telemetry,\n  isMSFTInternal,\n  getDiskFreeSpace,\n  CodedError,\n  CodedErrorType,\n  CodedErrors,\n} from '@react-native-windows/telemetry';\n\nimport * as build from './utils/build';\nimport chalk from 'chalk';\nimport * as deploy from './utils/deploy';\nimport {newError, newInfo, newWarn} from './utils/commandWithProgress';\nimport * as info from './utils/info';\nimport MSBuildTools from './utils/msbuildtools';\n\nimport {Command, Config} from '@react-native-community/cli-types';\nimport {runWindowsOptions, RunWindowsOptions} from './runWindowsOptions';\n\nimport {autoLinkCommand} from './utils/autolink';\nimport {totalmem, cpus} from 'os';\n\nfunction setExitProcessWithError(\n  error: Error,\n  loggingWasEnabled: boolean,\n): void {\n  if (!loggingWasEnabled) {\n    console.log(\n      `Re-run the command with ${chalk.bold('--logging')} for more information`,\n    );\n    if (Telemetry.client) {\n      console.log(\n        `Your session id was ${Telemetry.client.commonProperties.sessionId}`,\n      );\n    }\n  }\n  if (error instanceof CodedError) {\n    process.exitCode = CodedErrors[error.name as CodedErrorType];\n  } else {\n    process.exitCode = 1;\n  }\n}\n\nfunction getPkgVersion(pkgName: string): string {\n  try {\n    const pkgJsonPath = require.resolve(`${pkgName}/package.json`, {\n      paths: [process.cwd(), __dirname],\n    });\n    const pkgJson = JSON.parse(fs.readFileSync(pkgJsonPath).toString());\n    if (pkgJson.name === pkgName && pkgJson.version !== undefined) {\n      return pkgJson.version;\n    }\n  } catch {}\n  newWarn(`Could not determine ${pkgName} version`);\n  return '';\n}\n\n/**\n * Labels used by telemtry to represent current operation\n */\ntype RunWindowsPhase =\n  | 'None'\n  | 'AutoLink'\n  | 'FindBuildTools'\n  | 'FindSolution'\n  | 'Deploy';\n\nlet runWindowsPhase: RunWindowsPhase = 'None';\n/**\n * Performs build deploy and launch of RNW apps.\n * @param args Unprocessed args passed from react-native CLI.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n */\nasync function runWindows(\n  args: string[],\n  config: Config,\n  options: RunWindowsOptions,\n) {\n  if (!options.telemetry) {\n    if (options.logging) {\n      console.log('Disabling telemetry');\n    }\n    Telemetry.disable();\n  } else {\n    Telemetry.setup();\n  }\n\n  // https://github.com/yarnpkg/yarn/issues/8334 - Yarn on Windows breaks apps that read from the environment variables\n  // Yarn will run node via CreateProcess and pass npm_config_* variables in lowercase without unifying their value\n  // with their possibly existing uppercase counterparts. This breaks programs that read from the environment block\n  // and write to a case-insensitive dictionary since they expect to encounter each variable only once.\n  // The values of the lowercase variables are the one npm actually wants to use, plus they are seeded from the\n  // uppercase variable values one if there are no overrides.\n  delete process.env.NPM_CONFIG_CACHE;\n  delete process.env.NPM_CONFIG_PREFIX;\n\n  const hasRunRnwDependencies =\n    process.env.LocalAppData &&\n    fs.existsSync(path.join(process.env.LocalAppData, 'rnw-dependencies.txt')); // CODESYNC \\vnext\\scripts\\rnw-dependencies.ps1\n\n  if (options.info) {\n    try {\n      const output = await info.getEnvironmentInfo();\n      console.log(output.trimEnd());\n      console.log('  Installed UWP SDKs:');\n      const sdks = MSBuildTools.getAllAvailableUAPVersions();\n      sdks.forEach(version => console.log('    ' + version));\n      return;\n    } catch (e) {\n      Telemetry.trackException(e);\n      newError('Unable to print environment info.\\n' + e.toString());\n      return setExitProcessWithError(e, options.logging);\n    }\n  }\n\n  let runWindowsError;\n  try {\n    await runWindowsInternal(args, config, options);\n  } catch (e) {\n    Telemetry.trackException(e);\n    runWindowsError = e;\n    if (!hasRunRnwDependencies) {\n      const rnwPkgJsonPath = require.resolve(\n        'react-native-windows/package.json',\n        {\n          paths: [process.cwd(), __dirname],\n        },\n      );\n      const rnwDependenciesPath = path.join(\n        path.dirname(rnwPkgJsonPath),\n        'scripts/rnw-dependencies.ps1',\n      );\n\n      newError(\n        `It is possible your installation is missing required software dependencies. Dependencies can be automatically installed by running ${rnwDependenciesPath} from an elevated PowerShell prompt.\\nFor more information, go to http://aka.ms/rnw-deps`,\n      );\n    }\n    return setExitProcessWithError(e, options.logging);\n  } finally {\n    Telemetry.client?.trackEvent({\n      name: 'run-windows',\n      properties: {\n        release: options.release,\n        arch: options.arch,\n        singleproc: options.singleproc,\n        emulator: options.emulator,\n        device: options.device,\n        target: options.target,\n        remoteDebugging: options.remoteDebugging,\n        logging: options.logging,\n        packager: options.packager,\n        bundle: options.bundle,\n        launch: options.launch,\n        autolink: options.autolink,\n        build: options.bundle,\n        deploy: options.deploy,\n        sln: options.sln !== undefined,\n        proj: options.proj !== undefined,\n        msBuildProps:\n          options.msbuildprops !== undefined\n            ? options.msbuildprops!.split(',').length\n            : 0,\n        info: options.info,\n        directDebugging: options.directDebugging,\n        'react-native-windows': getPkgVersion('react-native-windows'),\n        'react-native': getPkgVersion('react-native'),\n        'cli-version': getPkgVersion('@react-native-windows/cli'),\n        msftInternal: isMSFTInternal(),\n        durationInSecs: process.uptime(),\n        success: runWindowsError === undefined,\n        phase: runWindowsPhase,\n        totalMem: totalmem(),\n        diskFree: getDiskFreeSpace(__dirname),\n        cpus: cpus().length,\n        project: await getAnonymizedProjectName(config.root),\n        hasRunRnwDependencies: hasRunRnwDependencies,\n      },\n    });\n    Telemetry.client?.flush();\n  }\n}\n\nexport async function getAnonymizedProjectName(\n  projectRoot: string,\n): Promise<string | null> {\n  const projectJsonPath = path.join(projectRoot, 'package.json');\n  if (!fs.existsSync(projectJsonPath)) {\n    return null;\n  }\n\n  const projectJson = JSON.parse(\n    (await fs.promises.readFile(projectJsonPath)).toString(),\n  );\n\n  const projectName = projectJson.name;\n  if (typeof projectName !== 'string') {\n    return null;\n  }\n\n  // Ensure the project name cannot be reverse engineered to avoid leaking PII\n  return crypto\n    .createHash('sha256')\n    .update(projectName)\n    .digest('hex')\n    .toString();\n}\n\nasync function runWindowsInternal(\n  args: string[],\n  config: Config,\n  options: RunWindowsOptions,\n) {\n  const verbose = options.logging;\n\n  if (verbose) {\n    newInfo('Verbose: ON');\n  }\n\n  // Get the solution file\n  let slnFile;\n  try {\n    slnFile = build.getAppSolutionFile(options, config);\n  } catch (e) {\n    newError(`Couldn't get app solution information. ${e.message}`);\n    throw e;\n  }\n\n  try {\n    if (options.autolink) {\n      const autolinkArgs: string[] = [];\n      const autolinkConfig = config;\n      const autoLinkOptions = {\n        logging: options.logging,\n        proj: options.proj,\n        sln: options.sln,\n      };\n      runWindowsPhase = 'AutoLink';\n      await autoLinkCommand.func(autolinkArgs, autolinkConfig, autoLinkOptions);\n    } else {\n      newInfo('Autolink step is skipped');\n    }\n  } catch (e) {\n    newError(`Autolinking failed. ${e.message}`);\n    throw e;\n  }\n\n  let buildTools: MSBuildTools;\n  runWindowsPhase = 'FindBuildTools';\n  try {\n    buildTools = MSBuildTools.findAvailableVersion(options.arch, verbose);\n  } catch (error) {\n    newWarn('No public VS release found');\n    // Try prerelease\n    try {\n      newInfo('Trying pre-release VS');\n      buildTools = MSBuildTools.findAvailableVersion(\n        options.arch,\n        verbose,\n        true, // preRelease\n      );\n    } catch (e) {\n      newError(e.message);\n      throw error;\n    }\n  }\n\n  if (options.build) {\n    runWindowsPhase = 'FindSolution';\n    if (!slnFile) {\n      newError(\n        'Visual Studio Solution file not found. Maybe run \"npx react-native-windows-init\" first?',\n      );\n      throw new CodedError('NoSolution', 'Cannot find solution file');\n    }\n\n    // Get build/deploy options\n    const buildType = deploy.getBuildConfiguration(options);\n    const msBuildProps = build.parseMsBuildProps(options);\n\n    // Disable the autolink check since we just ran it\n    msBuildProps.RunAutolinkCheck = 'false';\n\n    try {\n      runWindowsPhase = 'FindSolution';\n      await build.buildSolution(\n        buildTools,\n        slnFile!,\n        buildType,\n        options.arch,\n        msBuildProps,\n        verbose,\n        'build',\n        options.buildLogDirectory,\n        options.singleproc,\n      );\n    } catch (e) {\n      newError(\n        `Build failed with message ${e.message}. Check your build configuration.`,\n      );\n      if (e.logfile) {\n        console.log('See', chalk.bold(e.logfile));\n      }\n      throw e;\n    }\n  } else {\n    newInfo('Build step is skipped');\n  }\n\n  if (shouldLaunchPackager(options)) {\n    await deploy.startServerInNewWindow(options, verbose);\n  }\n\n  if (options.deploy) {\n    runWindowsPhase = 'FindSolution';\n    if (!slnFile) {\n      newError(\n        'Visual Studio Solution file not found. Maybe run \"npx react-native-windows-init\" first?',\n      );\n      throw new CodedError('NoSolution', 'Cannot find solution file');\n    }\n\n    try {\n      runWindowsPhase = 'Deploy';\n      if (options.device || options.emulator || options.target) {\n        await deploy.deployToDevice(options, verbose);\n      } else {\n        await deploy.deployToDesktop(options, verbose, config, buildTools);\n      }\n    } catch (e) {\n      newError(`Failed to deploy${e ? `: ${e.message}` : ''}`);\n      throw e;\n    }\n  } else {\n    newInfo('Deploy step is skipped');\n  }\n}\n\nfunction shouldLaunchPackager(options: RunWindowsOptions): boolean {\n  return options.packager && options.launch && options.release !== true;\n}\n\n/*\n// Example of running the Windows Command\nrunWindows({\n  root: 'C:\\\\github\\\\hack\\\\myapp',\n  debug: true,\n  arch: 'x86',\n  nugetPath: 'C:\\\\github\\\\react\\\\react-native-windows\\\\local-cli\\\\runWindows\\\\.nuget\\\\nuget.exe'\n});\n*/\n\n/**\n * Starts the app on a connected Windows emulator or mobile device.\n */\nexport const runWindowsCommand: Command = {\n  name: 'run-windows',\n  description:\n    'builds your app and starts it on a connected Windows desktop, emulator or device',\n  func: runWindows,\n  options: runWindowsOptions,\n};\n"]}