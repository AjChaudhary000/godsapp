{"version":3,"file":"msbuildtools.js","sourceRoot":"","sources":["../../../src/runWindows/utils/msbuildtools.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport {totalmem, EOL} from 'os';\nimport fs from 'fs';\nimport path from 'path';\nimport child_process from 'child_process';\nimport chalk from 'chalk';\nimport os from 'os';\nimport shell from 'shelljs';\nimport Version from './version';\nimport * as checkRequirements from './checkRequirements';\nimport {\n  commandWithProgress,\n  newInfo,\n  newSpinner,\n  newSuccess,\n  newError,\n} from './commandWithProgress';\nimport {execSync} from 'child_process';\nimport {BuildArch, BuildConfig} from '../runWindowsOptions';\nimport {findLatestVsInstall} from './vsInstalls';\nimport {CodedError} from '@react-native-windows/telemetry';\n\nexport default class MSBuildTools {\n  /**\n   * @param version is something like 16.0 for 2019\n   * @param installationPath  Path to installation root\n   * @param installationVersion is the full version e.g. 16.3.29411.108\n   */\n  constructor(\n    public readonly version: string,\n    public readonly installationPath: string,\n    public readonly installationVersion: string,\n  ) {}\n\n  /**\n   * @returns directory where x86 msbuild can be found\n   */\n  msbuildPath() {\n    return path.join(this.installationPath, 'MSBuild/Current/Bin');\n  }\n\n  cleanProject(slnFile: string) {\n    const cmd = `\"${path.join(\n      this.msbuildPath(),\n      'msbuild.exe',\n    )}\" \"${slnFile}\" /t:Clean`;\n    const results = child_process\n      .execSync(cmd)\n      .toString()\n      .split(EOL);\n    results.forEach(result => console.log(chalk.white(result)));\n  }\n\n  async buildProject(\n    slnFile: string,\n    buildType: BuildConfig,\n    buildArch: BuildArch,\n    msBuildProps: Record<string, string>,\n    verbose: boolean,\n    target: 'build' | 'deploy',\n    buildLogDirectory: string | undefined,\n    singleproc?: boolean,\n  ) {\n    newSuccess(`Found Solution: ${slnFile}`);\n    newInfo(`Build configuration: ${buildType}`);\n    newInfo(`Build platform: ${buildArch}`);\n\n    const verbosityOption = verbose ? 'normal' : 'minimal';\n    const logPrefix = path.join(\n      buildLogDirectory || os.tmpdir(),\n      `msbuild_${process.pid}_${target}`,\n    );\n\n    const errorLog = logPrefix + '.err';\n    const warnLog = logPrefix + '.wrn';\n\n    const localBinLog = target === 'build' ? '' : ':deploy.binlog';\n    const binlog = buildLogDirectory ? `:${logPrefix}.binlog` : localBinLog;\n\n    const args = [\n      `/clp:NoSummary;NoItemAndPropertyList;Verbosity=${verbosityOption}`,\n      '/nologo',\n      `/p:Configuration=${buildType}`,\n      `/p:Platform=${buildArch}`,\n      '/p:AppxBundle=Never',\n      `/bl${binlog}`,\n      `/flp1:errorsonly;logfile=${errorLog}`,\n      `/flp2:warningsonly;logfile=${warnLog}`,\n    ];\n\n    // Building projects in parallel increases compiler memory usage and\n    // doesn't lead to dramatic performance gains (See #4739). Only enable\n    // parallel builds on machines with >16GB of memory to avoid OOM errors\n    const highMemory = totalmem() > 16 * 1024 * 1024 * 1024;\n    const enableParallelBuilds = singleproc === false || highMemory;\n\n    if (enableParallelBuilds) {\n      args.push('/maxCpuCount');\n    }\n\n    if (target === 'build') {\n      args.push('/restore', '/p:RestorePackagesConfig=true');\n    } else {\n      args.push(`/t:Deploy`);\n    }\n\n    Object.keys(msBuildProps).forEach(key => {\n      args.push(`/p:${key}=${msBuildProps[key]}`);\n    });\n\n    try {\n      checkRequirements.isWinSdkPresent('10.0');\n    } catch (e) {\n      newError(e.message);\n      throw e;\n    }\n\n    if (verbose) {\n      console.log(`Running MSBuild with args ${args.join(' ')}`);\n    }\n\n    const progressName =\n      target === 'deploy' ? 'Deploying Solution' : 'Building Solution';\n    const spinner = newSpinner(progressName);\n    try {\n      await commandWithProgress(\n        spinner,\n        progressName,\n        path.join(this.msbuildPath(), 'msbuild.exe'),\n        [slnFile].concat(args),\n        verbose,\n        'MSBuildError',\n      );\n    } catch (e) {\n      let error = e;\n      if (!e) {\n        const firstMessage = (await fs.promises.readFile(errorLog))\n          .toString()\n          .split(EOL)[0];\n        error = new CodedError('MSBuildError', firstMessage);\n        error.logfile = errorLog;\n      }\n      throw error;\n    }\n    // If we have no errors, delete the error log when we're done\n    if ((await fs.promises.stat(errorLog)).size === 0) {\n      await fs.promises.unlink(errorLog);\n    }\n  }\n\n  static findAvailableVersion(\n    buildArch: BuildArch,\n    verbose: boolean,\n    prerelease?: boolean,\n  ): MSBuildTools {\n    // https://aka.ms/vs/workloads\n    const requires = [\n      'Microsoft.Component.MSBuild',\n      getVCToolsByArch(buildArch),\n    ];\n    const minVersion = process.env.VisualStudioVersion || '16.7';\n    const vsInstallation = findLatestVsInstall({\n      requires,\n      minVersion,\n      verbose,\n      prerelease,\n    });\n\n    if (!vsInstallation) {\n      if (process.env.VisualStudioVersion != null) {\n        throw new CodedError(\n          'NoMSBuild',\n          `MSBuild tools not found for version ${process.env.VisualStudioVersion} (from environment). Make sure all required components have been installed`,\n          {VisualStudioVersionFromEnv: process.env.VisualStudioVersion},\n        );\n      } else {\n        throw new CodedError(\n          'NoMSBuild',\n          `Could not find MSBuild with VCTools for Visual Studio ${minVersion} or later. Make sure all required components have been installed`,\n          {minVersion: minVersion},\n        );\n      }\n    }\n\n    const toolsPath = path.join(\n      vsInstallation.installationPath,\n      'MSBuild/Current/Bin',\n    );\n\n    if (fs.existsSync(toolsPath)) {\n      newSuccess(\n        `Found compatible MSBuild at ${toolsPath} (${vsInstallation.installationVersion})`,\n      );\n      return new MSBuildTools(\n        minVersion,\n        vsInstallation.installationPath,\n        vsInstallation.installationVersion,\n      );\n    } else {\n      throw new CodedError(\n        'NoMSBuild',\n        `MSBuild path '${toolsPath} does not exist'`,\n      );\n    }\n  }\n\n  static getAllAvailableUAPVersions(): Version[] {\n    const results: Version[] = [];\n\n    const programFilesFolder =\n      process.env['ProgramFiles(x86)'] || process.env.ProgramFiles;\n    // No Program Files folder found, so we won't be able to find UAP SDK\n    if (!programFilesFolder) {\n      return results;\n    }\n\n    let uapFolderPath = path.join(\n      programFilesFolder,\n      'Windows Kits',\n      '10',\n      'Platforms',\n      'UAP',\n    );\n\n    if (!shell.test('-e', uapFolderPath)) {\n      // Check other installation folder from reg\n      const sdkFolder = getSDK10InstallationFolder();\n      if (sdkFolder) {\n        uapFolderPath = path.join(sdkFolder, 'Platforms', 'UAP');\n      }\n    }\n\n    // No UAP SDK exists on this machine\n    if (!shell.test('-e', uapFolderPath)) {\n      return results;\n    }\n\n    shell\n      .ls(uapFolderPath)\n      .filter(uapDir => shell.test('-d', path.join(uapFolderPath, uapDir)))\n      .map(Version.tryParse)\n      .forEach(version => version && results.push(version));\n\n    return results;\n  }\n}\n\nfunction getVCToolsByArch(buildArch: BuildArch): string {\n  switch (buildArch) {\n    case 'x86':\n    case 'x64':\n      return 'Microsoft.VisualStudio.Component.VC.Tools.x86.x64';\n    case 'ARM64':\n      return 'Microsoft.VisualStudio.Component.VC.Tools.ARM64';\n  }\n}\n\nfunction getSDK10InstallationFolder(): string {\n  const folder = '';\n\n  const execString =\n    'reg query \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v10.0\" /s /v InstallationFolder /reg:32';\n  let output;\n  try {\n    output = execSync(execString).toString();\n  } catch (e) {\n    return folder;\n  }\n\n  const re = /\\\\Microsoft SDKs\\\\Windows\\\\v10.0\\s*InstallationFolder\\s+REG_SZ\\s+(.*)/gim;\n  const match = re.exec(output);\n  if (match) {\n    return match[1];\n  }\n\n  return folder;\n}\n"]}