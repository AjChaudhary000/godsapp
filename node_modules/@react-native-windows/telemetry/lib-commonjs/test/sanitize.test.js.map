{"version":3,"file":"sanitize.test.js","sourceRoot":"","sources":["../../src/test/sanitize.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport {\n  Telemetry,\n  sanitizeMessage,\n  sanitizeEnvelope,\n  sanitizeFrame,\n  tryGetErrorCode,\n} from '../telemetry';\nimport * as appInsights from 'applicationinsights';\nimport {basename} from 'path';\nimport {CodedError} from '../CodedError';\n\ndelete process.env.AGENT_NAME; // allow this test to run in Azure DevOps / GHA\nTelemetry.setup(true);\nTelemetry.client!.config.disableAppInsights = true;\n\ntest('Sanitize message, no-op', () => {\n  // do stuff\n  expect(sanitizeMessage('')).toEqual('');\n  expect(sanitizeMessage('some text')).toEqual('some text');\n});\n\ntest('Sanitize message, project_dir', () => {\n  expect(sanitizeMessage(`this is the cwd: '${process.cwd()}'`)).toEqual(\n    `this is the cwd:  [project_dir]\\\\???(${process.cwd().length})`,\n  );\n  expect(\n    sanitizeMessage(`uppercase: '${process.cwd().toUpperCase()}'`),\n  ).toEqual(`uppercase:  [project_dir]\\\\???(${process.cwd().length})`);\n  expect(\n    sanitizeMessage(`lowercase: '${process.cwd().toLowerCase()}'`),\n  ).toEqual(`lowercase:  [project_dir]\\\\???(${process.cwd().length})`);\n  expect(\n    sanitizeMessage(`this is the cwd: '${process.cwd()}' and something else`),\n  ).toEqual(\n    `this is the cwd:  [project_dir]\\\\???(${\n      process.cwd().length\n    })  and something else`,\n  );\n  expect(\n    sanitizeMessage(`this is the cwd: ${process.cwd()} and something else`),\n  ).toEqual(\n    `this is the cwd: [project_dir]\\\\???(${\n      (process.cwd() + ' and something else').length\n    })`,\n  );\n});\n\ntest('Sanitize message, node_modules', () => {\n  expect(\n    sanitizeMessage(`this is the cwd: '${process.cwd()}\\\\node_modules'`),\n  ).toEqual(\n    `this is the cwd:  [project_dir]\\\\???(${\n      (process.cwd() + '\\\\node_modules').length\n    })`,\n  );\n  expect(\n    sanitizeMessage(`this is the cwd: '${process.cwd()}\\\\node_modules\\\\foo'`),\n  ).toEqual('this is the cwd:  node_modules\\\\foo');\n  expect(\n    sanitizeMessage(\n      `uppercase: '${process.cwd().toUpperCase()}\\\\NODE_MODULES\\\\foo'`,\n    ),\n  ).toEqual('uppercase:  node_modules\\\\foo');\n  expect(\n    sanitizeMessage(\n      `lowercase: '${process.cwd().toLowerCase()}\\\\NODE_MODULES\\\\'`,\n    ),\n  ).toEqual('lowercase:  node_modules\\\\');\n  expect(\n    sanitizeMessage(\n      `trailing: '${process.cwd()}\\\\node_modules\\\\' and something else`,\n    ),\n  ).toEqual('trailing:  node_modules\\\\  and something else');\n  expect(\n    sanitizeMessage(\n      `this is the cwd: ${process.cwd()}\\\\node_modules and something else that could be part of the path`,\n    ),\n  ).toEqual(\n    `this is the cwd: [project_dir]\\\\???(${\n      (\n        process.cwd() +\n        '\\\\node_modules and something else that could be part of the path'\n      ).length\n    })`,\n  );\n  expect(\n    sanitizeMessage(\n      `this is the cwd: ${process.cwd()}\\\\node_modules\\\\ a file under nm`,\n    ),\n  ).toEqual(`this is the cwd: node_modules\\\\ a file under nm`);\n});\n\ntest('Sanitize message, other path', () => {\n  expect(sanitizeMessage(`this is another path: 'A:\\\\foo\\\\bar\\\\baz'`)).toEqual(\n    `this is another path:  [path]`,\n  );\n\n  expect(sanitizeMessage(`this is another path: A:\\\\foo\\\\bar\\\\baz`)).toEqual(\n    `this is another path: [path]`,\n  );\n\n  expect(\n    sanitizeMessage(\n      `Cannot find module 'react-native/package.json'\n      Require stack:\n      - ${process.env.AppData}\\\\npm-cache\\\\_npx\\\\1384\\\\node_modules\\\\react-native-windows-init\\\\lib-commonjs\\\\Cli.js\n      - ${process.env.AppData}\\\\npm-cache\\\\_npx\\\\1384\\\\node_modules\\\\react-native-windows-init\\\\bin.js`,\n    ),\n  ).toEqual(`Cannot find module  react-native/package.json \n      Require stack:\n      - [AppData]\\\\???(${\n        (\n          process.env.AppData +\n          '\\\\npm-cache\\\\_npx\\\\1384\\\\node_modules\\\\react-native-windows-init\\\\lib-commonjs\\\\Cli.js'\n        ).length\n      })\n      - [AppData]\\\\???(${\n        (\n          process.env.AppData +\n          '\\\\npm-cache\\\\_npx\\\\1384\\\\node_modules\\\\react-native-windows-init\\\\bin.js'\n        ).length\n      })`);\n});\n\ntest('Sanitize message, forward slashes', () => {\n  expect(\n    sanitizeMessage(\n      `EPERM: operation not permitted, scandir  ${process.env.UserProfile!.replace(\n        /\\\\/g,\n        '/',\n      )}/source/repos/rn2/wintest/windows/packages/boost.1.76.0.0/lib/native/include`,\n    ),\n  ).toEqual(\n    `EPERM: operation not permitted, scandir  [UserProfile]\\\\???(${\n      (\n        process.env.UserProfile +\n        '/source/repos/rn2/wintest/windows/packages/boost.1.76.0.0/lib/native/include'\n      ).length\n    })`,\n  );\n});\n\ntest('Sanitize message, file share path', () => {\n  expect(sanitizeMessage(`\\\\\\\\server\\\\share`)).toEqual('[path]');\n});\n\ntest('Sanitize message, with cpu/thread id', () => {\n  expect(sanitizeMessage('5>This is an error')).toEqual('This is an error');\n\n  expect(sanitizeMessage('5:42>This is an error')).toEqual('This is an error');\n});\n\ntest('Error code', () => {\n  expect(tryGetErrorCode('foo bar error FOO2020: the thing')).toEqual(\n    'FOO2020',\n  );\n});\n\ntest('Sanitize stack frame', () => {\n  const emptyFrame: appInsights.Contracts.StackFrame = {\n    level: 0,\n    method: '',\n    fileName: '',\n    assembly: 'asdf',\n    line: 0,\n  };\n  sanitizeFrame(emptyFrame);\n  expect(emptyFrame).toEqual({\n    level: 0,\n    assembly: '',\n    fileName: '.',\n    method: '',\n    line: 0,\n  });\n\n  const frame1: appInsights.Contracts.StackFrame = {\n    method: '',\n    fileName: `${process.cwd()}\\\\foo.js`,\n    assembly: 'asdf',\n    level: 0,\n    line: 0,\n  };\n  sanitizeFrame(frame1);\n  expect(frame1).toEqual({\n    assembly: '',\n    fileName: 'telemetry\\\\foo.js',\n    method: '',\n    level: 0,\n    line: 0,\n  });\n\n  const frame2: appInsights.Contracts.StackFrame = {\n    method: `myMethod (something ${process.cwd()}`,\n    fileName: `${process.cwd()}\\\\foo.js`,\n    assembly: 'asdf',\n    level: 1,\n    line: 42,\n  };\n  sanitizeFrame(frame2);\n  expect(frame2).toEqual({\n    assembly: '',\n    fileName: 'telemetry\\\\foo.js',\n    method: 'myMethod',\n    level: 1,\n    line: 42,\n  });\n});\n\ntest('basic setup', () => {\n  expect(Telemetry.client!.commonProperties.sessionId).toBeDefined();\n\n  expect(\n    Telemetry.client!.commonProperties.sessionId.length,\n  ).toBeGreaterThanOrEqual(32);\n\n  expect(Telemetry.client!.commonProperties.isTest).toEqual('true');\n});\n\nfunction b(s: string) {\n  throw new Error('hello ' + s);\n}\nfunction a(s: string) {\n  b(s);\n}\n\n// #7903: This test assumes exact structure of stack trace, which can be flaky or implementation dependent\ntest.skip('thrown exception a->b, hello world', () => {\n  let pass = false;\n  Telemetry.client!.addTelemetryProcessor((envelope, _) => {\n    if (envelope.data.baseType === 'ExceptionData') {\n      const data = (envelope.data as any).baseData;\n      expect(data.exceptions).toBeDefined();\n      expect(data.exceptions.length).toEqual(1);\n      expect(data.exceptions[0].message).toEqual('hello world');\n\n      const stack = data.exceptions[0].parsedStack;\n      expect(stack).toBeDefined();\n      expect(stack.length).toBeGreaterThan(5);\n\n      const filename = basename(__filename);\n      expect(stack[0].method).toEqual('b');\n      expect(stack[1].method).toEqual('b');\n      expect(stack[2].method).toEqual('Object.a');\n      expect(stack[0].fileName).toEqual(`test\\\\${filename}`);\n      expect(stack[1].fileName).toEqual(`test\\\\${filename}`);\n      expect(stack[2].fileName).toEqual(`test\\\\${filename}`);\n      pass = true;\n    }\n    return true;\n  });\n  try {\n    a('world');\n  } catch (e) {\n    Telemetry.client!.trackException({exception: e});\n  }\n  Telemetry.client!.flush();\n\n  expect(pass).toBeTruthy();\n  Telemetry.client!.clearTelemetryProcessors();\n  Telemetry.client!.addTelemetryProcessor(sanitizeEnvelope);\n});\n\ntest('throw exception with error code', done => {\n  Telemetry.client!.addTelemetryProcessor((envelope, _) => {\n    const data = (envelope.data as any).baseData;\n    expect(data.properties.errorCode).toEqual('FOO2020');\n    return true;\n  });\n\n  try {\n    throw new Error('hello from an error FOO2020: the error string');\n  } catch (e) {\n    Telemetry.client!.trackException({exception: e});\n    Telemetry.client!.flush();\n  }\n  Telemetry.client!.clearTelemetryProcessors();\n  Telemetry.client!.addTelemetryProcessor(sanitizeEnvelope);\n  done();\n});\n\n// #7903: This test assumes exact structure of stack trace, which can be flaky or implementation dependent\ntest.skip('thrown exception a->b, hello path', done => {\n  let pass = false;\n  Telemetry.client!.addTelemetryProcessor((envelope, _) => {\n    if (envelope.data.baseType === 'ExceptionData') {\n      const data = (envelope.data as any).baseData;\n      expect(data.exceptions).toBeDefined();\n      expect(data.exceptions.length).toEqual(1);\n      expect(data.exceptions[0].message).toEqual(\n        `hello [project_dir]\\\\???(${process.cwd().length})`,\n      );\n\n      const stack = data.exceptions[0].parsedStack;\n      expect(stack).toBeDefined();\n      expect(stack.length).toBeGreaterThan(5);\n\n      const filename = basename(__filename);\n      expect(stack[0].method).toEqual('b');\n      expect(stack[1].method).toEqual('b');\n      expect(stack[2].method).toEqual('Object.a');\n      expect(stack[0].fileName).toEqual(`test\\\\${filename}`);\n      expect(stack[1].fileName).toEqual(`test\\\\${filename}`);\n      expect(stack[2].fileName).toEqual(`test\\\\${filename}`);\n      pass = true;\n    }\n    return true;\n  });\n  try {\n    a(process.cwd());\n  } catch (e) {\n    Telemetry.client!.trackException({exception: e});\n  }\n  Telemetry.client!.flush();\n\n  expect(pass).toBeTruthy();\n  expect(pass).toBeTruthy();\n  Telemetry.client!.clearTelemetryProcessors();\n  Telemetry.client!.addTelemetryProcessor(sanitizeEnvelope);\n  done();\n});\n\ntest('trackEvent should not identify roleInstance', () => {\n  Telemetry.client!.addTelemetryProcessor((envelope, _) => {\n    expect(envelope.tags['ai.cloud.roleInstance']).toBeUndefined();\n    return true;\n  });\n  Telemetry.client!.trackEvent({\n    name: 'test',\n    properties: {},\n  });\n  Telemetry.client!.flush();\n  Telemetry.client!.clearTelemetryProcessors();\n  Telemetry.client!.addTelemetryProcessor(sanitizeEnvelope);\n});\n\n/////////////////////////\n// CodedError tests\ntest('No message', done => {\n  Telemetry.preserveMessages = false;\n  let pass = false;\n  Telemetry.client!.addTelemetryProcessor((envelope, _) => {\n    if (envelope.data.baseType === 'ExceptionData') {\n      const data = (envelope.data as any).baseData;\n      expect(data.exceptions).toBeDefined();\n      expect(data.exceptions.length).toEqual(1);\n      expect(data.exceptions[0].message).toBeUndefined();\n      expect(data.exceptions[0].typeName).toEqual('MSBuildError');\n      // This should be 42, but instead it is '42'\n      // https://github.com/microsoft/ApplicationInsights-node.js/issues/708\n      expect(data.properties.foo).toBeDefined();\n      expect(parseInt(data.properties.foo, 10)).toEqual(42);\n      pass = true;\n    }\n    return true;\n  });\n\n  try {\n    throw new CodedError('MSBuildError', 'Something secret', {\n      foo: 42,\n    });\n  } catch (e) {\n    Telemetry.client!.trackException({\n      exception: e,\n      properties: (e as CodedError).data,\n    });\n    Telemetry.client!.flush();\n  }\n\n  expect(pass).toEqual(true);\n  Telemetry.client!.clearTelemetryProcessors();\n  Telemetry.client!.addTelemetryProcessor(sanitizeEnvelope);\n  done();\n});\n"]}