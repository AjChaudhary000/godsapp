{"version":3,"file":"CodedError.js","sourceRoot":"","sources":["../src/CodedError.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;AAEU,QAAA,WAAW,GAAG;IACzB,OAAO,EAAE,CAAC;IACV,OAAO;IACP,6BAA6B,EAAE,CAAC;IAChC,UAAU,EAAE,CAAC;IACb,kBAAkB,EAAE,CAAC;IACrB,aAAa,EAAE,CAAC;IAChB,0BAA0B,EAAE,CAAC;IAC7B,gCAAgC,EAAE,CAAC;IACnC,mBAAmB,EAAE,CAAC;IACtB,yBAAyB,EAAE,CAAC;IAC5B,wBAAwB,EAAE,CAAC;IAC3B,cAAc;IACd,UAAU,EAAE,GAAG;IACf,qBAAqB;IACrB,mBAAmB,EAAE,GAAG;IACxB,+BAA+B,EAAE,GAAG;IACpC,6BAA6B,EAAE,GAAG;IAClC,gCAAgC,EAAE,GAAG;IACrC,yBAAyB;IACzB,eAAe,EAAE,GAAG;IACpB,gBAAgB,EAAE,GAAG;IACrB,aAAa,EAAE,GAAG;IAClB,eAAe,EAAE,GAAG;IACpB,oBAAoB,EAAE,GAAG;IACzB,WAAW,EAAE,GAAG;IAChB,mBAAmB;IACnB,mBAAmB,EAAE,GAAG;IACxB,mBAAmB,EAAE,GAAG;IACxB,KAAK,EAAE,GAAG;IACV,QAAQ;IACR,SAAS,EAAE,GAAG;IACd,SAAS,EAAE,GAAG;IACd,YAAY,EAAE,GAAG;IACjB,SAAS;IACT,YAAY,EAAE,GAAG;IACjB,cAAc,EAAE,GAAG;IACnB,QAAQ,EAAE,GAAG;IACb,eAAe,EAAE,GAAG;IACpB,oBAAoB,EAAE,GAAG;IACzB,0BAA0B,EAAE,GAAG;IAC/B,oBAAoB,EAAE,GAAG;IACzB,iBAAiB,EAAE,GAAG;IACtB,6BAA6B,EAAE,GAAG;IAClC,wBAAwB,EAAE,GAAG;IAC7B,yBAAyB,EAAE,GAAG;IAC9B,2BAA2B,EAAE,GAAG;IAChC,mBAAmB,EAAE,GAAG;IAExB,SAAS;IACT,iBAAiB,EAAE,GAAG;IAEtB,EAAE;IACF,OAAO,EAAE,CAAC,CAAC;CACZ,CAAC;AAIF;;;;;;GAMG;AACH,MAAa,UAAW,SAAQ,KAAK;IACnC,YACE,IAAoB,EACpB,OAAe,EACC,IAA0B;QAE1C,KAAK,CAAC,OAAO,CAAC,CAAC;QAFC,SAAI,GAAJ,IAAI,CAAsB;QAG1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;CACF;AATD,gCASC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nexport const CodedErrors = {\n  Success: 0,\n  // init\n  UnsupportedReactNativeVersion: 1,\n  UserCancel: 2,\n  NoReactNativeFound: 3,\n  NoPackageJSon: 4,\n  NoLatestReactNativeWindows: 5,\n  NoAutoMatchingReactNativeWindows: 6,\n  IncompatibleOptions: 7,\n  NoReactNativeDependencies: 8,\n  NoMatchingPackageVersion: 9,\n  // run-windows\n  NoSolution: 100,\n  // Project generation\n  NoPropertyInProject: 200,\n  CopyProjectTemplateNoSourcePath: 201,\n  CopyProjectTemplateNoDestPath: 202,\n  CopyProjectTemplateNoProjectName: 203,\n  // Config and Autolinking\n  NoWindowsConfig: 300,\n  IncompleteConfig: 301,\n  InvalidConfig: 302,\n  NeedAutolinking: 303,\n  AddProjectToSolution: 304,\n  Autolinking: 305,\n  // SDK requirements\n  MinSDKVersionNotMet: 400,\n  BadSDKVersionFormat: 401,\n  NoSDK: 402,\n  // Build\n  NoMSBuild: 500,\n  NoVSWhere: 501,\n  MSBuildError: 502,\n  // Deploy\n  NoAppPackage: 600,\n  NoAppxManifest: 601,\n  NoDevice: 602,\n  AppDidNotDeploy: 603,\n  InvalidDevicesOutput: 604,\n  RemoveOldAppVersionFailure: 605,\n  EnableDevModeFailure: 606,\n  InstallAppFailure: 607,\n  InstallAppDependenciesFailure: 608,\n  CheckNetIsolationFailure: 709,\n  InstallAppToDeviceFailure: 710,\n  UninstallAppOnDeviceFailure: 711,\n  DeployRecipeFailure: 712,\n\n  // Others\n  AppStartupFailure: 700,\n\n  //\n  Unknown: -1,\n};\n\nexport type CodedErrorType = keyof typeof CodedErrors;\n\n/**\n * Represents an error whose message might contain user-originating content,\n * therefore when transmitting telemetry, only the type should be sent.\n * @param type a stable ID identifying the type of error.\n * @param message the error text. This should only be used for display to the user.\n * @param data any additional metadata that is safe to collect for telemetry purposes.\n */\nexport class CodedError extends Error {\n  constructor(\n    type: CodedErrorType,\n    message: string,\n    public readonly data?: Record<string, any>,\n  ) {\n    super(message);\n    this.name = type;\n  }\n}\n"]}