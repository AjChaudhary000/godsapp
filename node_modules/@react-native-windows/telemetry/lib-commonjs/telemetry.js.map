{"version":3,"file":"telemetry.js","sourceRoot":"","sources":["../src/telemetry.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport path from 'path';\nimport {randomBytes} from 'crypto';\nimport * as appInsights from 'applicationinsights';\nimport {execSync} from 'child_process';\nimport {CodedError} from './CodedError';\n\nexport class Telemetry {\n  static client?: appInsights.TelemetryClient | undefined = undefined;\n\n  static disable() {\n    if (Telemetry.client) {\n      Telemetry.client.config.disableAppInsights = true;\n    }\n    Telemetry.shouldDisable = true;\n  }\n\n  static setup(preserveMessages?: boolean) {\n    if (Telemetry.isCI()) {\n      this.disable();\n      return;\n    }\n    if (Telemetry.client) {\n      return;\n    }\n    if (!process.env.RNW_CLI_TEST) {\n      appInsights.Configuration.setInternalLogging(false, false);\n    }\n    appInsights.setup('795006ca-cf54-40ee-8bc6-03deb91401c3');\n    Telemetry.client = appInsights.defaultClient;\n\n    if (Telemetry.shouldDisable) {\n      Telemetry.disable();\n    }\n    Telemetry.preserveMessages = preserveMessages ? true : false;\n\n    if (process.env.RNW_CLI_TEST) {\n      Telemetry.client.commonProperties.isTest = process.env.RNW_CLI_TEST;\n    }\n    if (!Telemetry.client.commonProperties.sessionId) {\n      Telemetry.client.commonProperties.sessionId = randomBytes(16).toString(\n        'hex',\n      );\n      Telemetry.client.addTelemetryProcessor(sanitizeEnvelope);\n    }\n  }\n\n  static isCI(): boolean {\n    return (\n      process.env.AGENT_NAME !== undefined || // Azure DevOps\n      process.env.CIRCLECI === 'true' || // CircleCI\n      process.env.TRAVIS === 'true' || // Travis\n      process.env.CI === 'true' // other CIs\n    );\n  }\n\n  static trackException(e: Error, properties?: Record<string, any>) {\n    const props: Record<string, any> = {};\n    if (e instanceof CodedError) {\n      Object.assign(props, (e as CodedError).data);\n    }\n\n    const syscallExceptionFieldsToCopy = ['errno', 'syscall', 'code'];\n    for (const f of syscallExceptionFieldsToCopy) {\n      if ((e as any)[f]) {\n        props[f] = [f];\n      }\n    }\n    Object.assign(props, props, properties);\n    Telemetry.client?.trackException({\n      exception: e,\n      properties: props,\n    });\n  }\n\n  static shouldDisable: boolean = false;\n  static preserveMessages: boolean = false;\n}\n\nfunction getAnonymizedPath(filepath: string): string {\n  const projectRoot = process.cwd().toLowerCase();\n  filepath = filepath.replace(/\\//g, '\\\\');\n  const knownPathsVars = ['AppData', 'LocalAppData', 'UserProfile'];\n  if (filepath.toLowerCase().startsWith(projectRoot)) {\n    const ext = path.extname(filepath);\n    const rest = filepath.slice(projectRoot.length);\n    const nodeModules = '\\\\node_modules\\\\';\n    // this is in the project dir but not under node_modules\n    if (rest.toLowerCase().startsWith('\\\\windows\\\\')) {\n      return `[windows]\\\\???${ext}(${filepath.length})`;\n    } else if (rest.toLowerCase().startsWith(nodeModules)) {\n      return 'node_modules' + rest.slice(nodeModules.length - 1);\n    } else {\n      return `[project_dir]\\\\???${ext}(${filepath.length})`;\n    }\n  } else {\n    for (const knownPath of knownPathsVars) {\n      if (\n        process.env[knownPath] &&\n        filepath.toLowerCase().startsWith(process.env[knownPath]!.toLowerCase())\n      ) {\n        return `[${knownPath}]\\\\???(${filepath.length})`;\n      }\n    }\n  }\n  return '[path]';\n}\n/**\n * Sanitize any paths that appear between quotes (''), brackets ([]), or double quotes (\"\").\n * @param msg the string to sanitize\n */\nexport function sanitizeMessage(msg: string): string {\n  const cpuThreadId = /^\\d+(:\\d+)?>/g;\n  msg = msg.replace(cpuThreadId, '');\n  const parts = msg.split(/['[\\]\"]/g);\n  const clean = [];\n  const pathRegEx = /([A-Za-z]:|\\\\)[\\\\/]([^<>:;,?\"*\\t\\r\\n|/\\\\]+[\\\\/])+([^<>:;,?\"*\\t\\r\\n|]+\\/?)/gi;\n  for (const part of parts) {\n    if (pathRegEx.test(part)) {\n      pathRegEx.lastIndex = -1;\n      let matches: RegExpExecArray | null;\n      let noPath = '';\n      let last = 0;\n      while ((matches = pathRegEx.exec(part))) {\n        noPath +=\n          part.substr(last, matches!.index - last) +\n          getAnonymizedPath(matches[0]);\n        last = matches!.index + matches![0].length;\n      }\n      clean.push(noPath);\n    } else if (part !== '') {\n      clean.push(part);\n    }\n  }\n  return clean.join(' ').trim();\n}\n\nexport function sanitizeFrame(frame: any): void {\n  const parens = frame.method.indexOf('(');\n  if (parens !== -1) {\n    // case 1: method === 'methodName (rootOfThePath'\n    frame.method = frame.method.substr(0, parens).trim();\n  } else {\n    // case 2: method === <no_method> or something without '(', fileName is full path\n  }\n  // preserve only the last_directory/filename\n  frame.fileName = path.join(\n    path.basename(path.dirname(frame.fileName)),\n    path.basename(frame.fileName),\n  );\n  frame.assembly = '';\n}\n\nexport function tryGetErrorCode(msg: string): string | undefined {\n  const errorRegEx = /error (\\w+\\d+):/gi;\n  const m = errorRegEx.exec(msg);\n  return m ? m[1] : undefined;\n}\n\n/**\n * Remove PII from exceptions' stack traces and messages\n * @param envelope the telemetry envelope. Provided by AppInsights.\n */\nexport function sanitizeEnvelope(envelope: any /*context: any*/): boolean {\n  if (envelope.data.baseType === 'ExceptionData') {\n    const data = envelope.data.baseData;\n    for (const exception of data.exceptions || []) {\n      for (const frame of exception.parsedStack) {\n        sanitizeFrame(frame);\n      }\n      const errorCode = tryGetErrorCode(exception.message);\n      data.properties.errorCode = errorCode;\n      // CodedError has non-PII information in its 'type' member, plus optionally some more info in its 'data'.\n      // The message may contain PII information. This can be sanitized, but for now delete it.\n      // Note that the type of data.exceptions[0] is always going to be ExceptionDetails. It is not the original thrown exception.\n      // https://github.com/microsoft/ApplicationInsights-node.js/issues/707\n      if (Telemetry.preserveMessages) {\n        exception.message = sanitizeMessage(exception.message);\n      } else {\n        delete exception.message;\n      }\n    }\n  }\n  delete envelope.tags['ai.cloud.roleInstance'];\n  return true;\n}\n\nexport function isMSFTInternal(): boolean {\n  return (\n    process.env.UserDNSDomain !== undefined &&\n    process.env.UserDNSDomain.toLowerCase().endsWith('.microsoft.com')\n  );\n}\n\nexport function getDiskFreeSpace(drivePath: string | null): number {\n  const out = execSync(`dir /-C ${drivePath}`)\n    .toString()\n    .split('\\r\\n');\n  const line = out[out.length - 2];\n  const result = line.match(/(\\d+) [^\\d]+(\\d+) /);\n  if (result && result.length > 2) {\n    return Number(result[2]);\n  }\n  return -1;\n}\n"]}